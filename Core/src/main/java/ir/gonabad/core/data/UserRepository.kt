package ir.gonabad.core.dataimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.core.domain.addCategory.AddCategoryResponseimport ir.gonabad.core.domain.addTask.AddTaskResponseimport ir.gonabad.core.domain.deleteCategory.DeleteCategoryResponseimport ir.gonabad.core.domain.deleteUser.DeleteUserResponseimport ir.gonabad.core.domain.listCategory.CategoryListimport ir.gonabad.core.domain.listUser.UserListResponseimport ir.gonabad.core.domain.login.Loginimport ir.gonabad.core.helper.ApiCallHelperimport kotlinx.coroutines.flow.Flowimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.flow.collectimport kotlinx.coroutines.flow.flowclass UserRepository(    private val userRemoteDataSource: UserRemoteDataSource ,    private val userLocalDataSource: UserLocalDataSource) {    suspend fun login(username : String , password : String, isOnline: Boolean): Flow<DataState<Login>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.login(username, password)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            setToken(it.value.result.key)                            setType(it.value.result.type)                            setUsername(it.value.result.username)                            getToken()                            getType()                            getUsername()                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.login(username, password)        }    }    suspend fun register(username : String , password : String , type : String , token : String, isOnline: Boolean): Flow<DataState<Login>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.register(username, password , type , token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.register(username, password , type , token)        }    }    suspend fun getCategory(token : String, isOnline: Boolean): Flow<DataState<CategoryList>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.getCategory(token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.getCategory(token)        }    }    suspend fun addCategory(title : String ,token : String, isOnline: Boolean): Flow<DataState<AddCategoryResponse>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.addCategory(title , token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.addCategory(title , token)        }    }    suspend fun editCategory(id : String ,title : String ,token : String, isOnline: Boolean): Flow<DataState<AddCategoryResponse>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.editCategory(id ,title , token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.editCategory(id ,title , token)        }    }    suspend fun deleteCategory(id : String,token : String, isOnline: Boolean): Flow<DataState<DeleteCategoryResponse>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.deleteCategory(id , token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.deleteCategory(id , token)        }    }    suspend fun getUserList(token : String, isOnline: Boolean): Flow<DataState<UserListResponse>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.getUserList(token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.getUserList(token)        }    }    suspend fun deleteUser(username: String ,token : String, isOnline: Boolean): Flow<DataState<DeleteUserResponse>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.deleteUser(username ,token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.deleteUser(username ,token)        }    }    suspend fun addTask(        categoryId : String ,        title : String ,        descreption : String ,        status : String ,        days : String ,        users : String ,        token: String,        isOnline: Boolean    ): Flow<DataState<AddTaskResponse>> = flow {        try {            if (isOnline) {                ApiCallHelper.safeApiCall {                    userRemoteDataSource.addTask(categoryId, title, descreption, status, days, users, token)                }.catch {                    emit(DataState.LocalError(it.message))                }.collect {                    when (it) {                        is DataState.LocalError -> emit(DataState.LocalError(it.message))                        is DataState.NetworkError -> emit(DataState.NetworkError(it.networkError))                        is DataState.Success -> {                            emit(DataState.Success(it.value))                        }                    }                }            } else                emit(DataState.NoInternet)        } catch (e: Exception) {            userRemoteDataSource.addTask(categoryId, title, descreption, status, days, users, token)        }    }    fun setToken(token : String) {        userLocalDataSource.setToken(token)    }    fun setType(type : String){        userLocalDataSource.setType(type)    }    fun getToken() {        userLocalDataSource.getToken()    }    fun getType() {        userLocalDataSource.getType()    }    fun setUsername(username : String) {        userLocalDataSource.setUsername(username)    }    fun getUsername(){        userLocalDataSource.getUsername()    }}