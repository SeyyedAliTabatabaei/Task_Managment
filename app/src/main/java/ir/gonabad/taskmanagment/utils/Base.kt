package ir.gonabad.taskmanagment.utilsimport android.content.Contextimport android.view.ViewGroupimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport androidx.appcompat.app.AppCompatDelegateimport androidx.coordinatorlayout.widget.CoordinatorLayoutimport androidx.core.view.childrenimport androidx.fragment.app.Fragmentimport androidx.lifecycle.ViewModelimport com.google.android.material.snackbar.Snackbarimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.core.helper.NetworkErrorTypeimport ir.gonabad.taskmanagment.Rabstract class BaseFragment : Fragment() , SCView {    override val viewContext: Context?        get() = context    override val rootView: CoordinatorLayout?        get() = view as CoordinatorLayout}abstract class BaseActivity : AppCompatActivity() , SCView {    override val viewContext: Context?        get() = this    override val rootView: CoordinatorLayout?        get() {            val viewGroup = window.decorView.findViewById(android.R.id.content) as ViewGroup            if (viewGroup !is CoordinatorLayout){                viewGroup.children.forEach {                    if (it is CoordinatorLayout)                        return it                }                throw IllegalStateException("RootView must be instance of CoordinatorLayout")            }            else return viewGroup        }}interface SCView{    val rootView : CoordinatorLayout?    val viewContext : Context?    fun showToast(message : String , lengh : Int = Toast.LENGTH_SHORT){        viewContext?.let {            Toast.makeText(it , message , lengh).show()        }    }    fun showSnackBar(message : String , lengh : Int = Snackbar.LENGTH_SHORT){        viewContext?.let {context ->            rootView?.let { view ->                Snackbar.make(view , message , lengh).show()            }        }    }    fun showMessageErrorFromServer(error : DataState.NetworkError){        viewContext?.let {            when(error.networkError){                is NetworkErrorType.BadRequest -> (error.networkError as NetworkErrorType.BadRequest).errorResponse.message?.let { it1 -> showToast(it1) }                is NetworkErrorType.FieldsError -> (error.networkError as NetworkErrorType.FieldsError).errorResponse.message?.let { it1 -> showToast(it1) }                else -> showToast(it.getString(R.string.error_server))            }        }    }    fun changeTheme(isDarkMode : Boolean){        if (isDarkMode) AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES)        else AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO)    }}abstract class BaseViewModel : ViewModel() {    override fun onCleared() {        super.onCleared()    }}