package ir.gonabad.taskmanagment.presentation.addCategoryimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport dagger.hilt.android.AndroidEntryPointimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.taskmanagment.Rimport ir.gonabad.taskmanagment.databinding.FragmentAddCategoryBindingimport ir.gonabad.taskmanagment.presentation.home.CategoryAdapterimport ir.gonabad.taskmanagment.utils.BaseFragment@AndroidEntryPointclass AddCategoryFragment : BaseFragment() {    private val TAG = "AddCategoryFragment"    lateinit var binding : FragmentAddCategoryBinding    val viewModel : AddCategoryViewModel by viewModels()    var edit = false    var id : String ?= null    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = FragmentAddCategoryBinding.inflate(inflater , container , false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initViewModel()        initView()    }    private fun initView() {        arguments?.let {            edit = it.getBoolean("edit" , false)            val title = it.getString("title")            id = it.getString("id")            title?.let {t ->                binding.etAddCategoryName.setText(t)            }        }        binding.tbAddCategory.setNavigationOnClickListener {            findNavController().popBackStack()        }        binding.btnAddCategoryConfirm.setOnClickListener {            val title = binding.etAddCategoryName.text.toString()            if (title.isNullOrEmpty()){                binding.etlAddCategoryName.error = getString(R.string.field_not_empty)            } else {                if (edit){                    viewModel.editCategory(id.toString() , title)                } else{                    viewModel.addCategory(title)                }            }        }    }    private fun initViewModel() {        viewModel.addCategoryLiveData.observe(viewLifecycleOwner){            when(it){                is DataState.Loading -> {                    Log.i(TAG, "initViewModel: Loading")                    showLoading(true)                }                is DataState.Success -> {                    Log.i(TAG, "initViewModel: Success ${it.value}")                    showLoading(false)                    showToast(getString(R.string.add_category_success))                    findNavController().popBackStack()                }                is DataState.LocalError -> {                    Log.i(TAG, "initViewModel: LocalError ${it.message}")                    showLoading(false)                    showToast(getString(R.string.error_server))                }                is DataState.NetworkError -> {                    Log.i(TAG, "initViewModel: NetworkError ${it.networkError}")                    showLoading(false)                    showMessageErrorFromServer(it)                }            }        }    }    private fun showLoading(show : Boolean) {        binding.btnAddCategoryConfirm.visibility = if (show) View.GONE else View.VISIBLE        binding.pbAddCategory.visibility = if (show) View.VISIBLE else View.GONE    }}