package ir.gonabad.taskmanagment.presentation.taskListimport android.graphics.Typefaceimport android.os.Bundleimport android.view.LayoutInflaterimport android.view.MotionEventimport android.view.Viewimport android.view.ViewGroupimport androidx.core.content.res.ResourcesCompatimport androidx.navigation.fragment.findNavControllerimport androidx.recyclerview.widget.LinearLayoutManagerimport dagger.hilt.android.AndroidEntryPointimport ir.gonabad.taskmanagment.Rimport ir.gonabad.taskmanagment.databinding.FragmentTaskListBindingimport ir.gonabad.taskmanagment.di.qualifier.MediumTypefaceimport ir.gonabad.taskmanagment.presentation.cviews.ExposedDropDownMenuCustomAdapterimport ir.gonabad.taskmanagment.utils.BaseFragmentimport javax.inject.Inject@AndroidEntryPointclass TaskListFragment : BaseFragment() {    lateinit var binding : FragmentTaskListBinding    private lateinit var sortExposedDropDownAdapter: ExposedDropDownMenuCustomAdapter    @Inject    @MediumTypeface    lateinit var mediumTypeFace : Typeface    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = FragmentTaskListBinding.inflate(inflater , container , false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initView()        setupSort()    }    private fun initView() {        binding.tbTaskList.setNavigationOnClickListener {            findNavController().popBackStack()        }        binding.fabTaskListAddTask.typeface = mediumTypeFace        binding.fabTaskListAddTask.setOnClickListener {            findNavController().navigate(R.id.action_taskListFragment_to_manageTaskFragment)        }        binding.rvTaskList.layoutManager = LinearLayoutManager(requireContext() , LinearLayoutManager.VERTICAL , false)        binding.rvTaskList.adapter = TaskAdapter() {        }    }    private fun setupSort() {        binding.actvSessionHistorySort.setOnItemClickListener { _, _, i, _ ->            when (i) {                0 -> "sortDataByOption(SessionSortOption.RECENT)"            }            sortExposedDropDownAdapter.setSelectedItemPosition(i)        }//        sortExposedDropDownAdapter = ExposedDropDownMenuCustomAdapter(//            requireContext(),//            R.layout.item_simple_exposed_drop_down,//            R.id.tv_itemExposedDropDownMenu_item,//            resources.getStringArray(R.array.sortOptionArray).toList(),//            getValueFromTheme(requireContext(), R.attr.backgroundColorExposedDropDownSelectedItem)//        )        binding.actvSessionHistorySort.setDropDownBackgroundDrawable(            ResourcesCompat.getDrawable(                resources,                R.drawable.autocomplete_item_shape,                requireActivity().theme            )        )        binding.actvSessionHistorySort.setOnTouchListener { _, motionEvent ->            if (motionEvent.action == MotionEvent.ACTION_DOWN) {                binding.actvSessionHistorySort.setAdapter(sortExposedDropDownAdapter)                binding.actvSessionHistorySort.showDropDown()            }            true        }    }}