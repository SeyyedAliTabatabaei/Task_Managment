package ir.gonabad.taskmanagment.presentation.homeimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.appcompat.widget.PopupMenuimport androidx.recyclerview.widget.RecyclerViewimport ir.gonabad.core.domain.listCategory.CategoryListimport ir.gonabad.core.domain.listCategory.ItemCategoryimport ir.gonabad.taskmanagment.Rimport ir.gonabad.taskmanagment.databinding.ItemCategoryBindingimport ir.gonabad.taskmanagment.utils.Constantsimport ir.gonabad.taskmanagment.utils.UserInfoContainerclass CategoryAdapter(private val categoryList: CategoryList, private val clickItemMenu: ClickItemMenu) : RecyclerView.Adapter<CategoryAdapter.CategoryAdapterViewHolder>() {    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CategoryAdapterViewHolder {        return CategoryAdapterViewHolder(ItemCategoryBinding.inflate(LayoutInflater.from(parent.context) , parent , false))    }    override fun getItemCount(): Int {        return categoryList.result.size    }    override fun onBindViewHolder(holder: CategoryAdapterViewHolder, position: Int) {        holder.onBind(categoryList.result[position])    }    inner class CategoryAdapterViewHolder(private val categoryBinding: ItemCategoryBinding) : RecyclerView.ViewHolder(categoryBinding.root){        fun onBind(item : ItemCategory) {            categoryBinding.cvItemCategoryItem.setOnClickListener {                clickItemMenu.clickItem(item.id)            }            categoryBinding.tvItemCategoryTitle.text = item.title            if (UserInfoContainer.typeAccount == Constants.TYPE_USER)                categoryBinding.ivItemCategoryMenu.visibility = View.GONE            categoryBinding.ivItemCategoryMenu.setOnClickListener {                val popup = PopupMenu(categoryBinding.root.context , categoryBinding.ivItemCategoryMenu)                popup.menuInflater.inflate(R.menu.category_menu , popup.menu)                popup.setOnMenuItemClickListener {                    when(it.itemId){                        R.id.item_categoryMenu_edit -> {                            clickItemMenu.edit(item.id , item.title)                        }                        R.id.item_categoryMenu_delet -> {                            clickItemMenu.delete(item.id)                        }                    }                    return@setOnMenuItemClickListener false                }                popup.show()            }        }    }    interface ClickItemMenu{        fun clickItem(id : String)        fun edit(id : String , title : String)        fun delete(id : String)    }}