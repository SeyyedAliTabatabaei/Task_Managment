package ir.gonabad.taskmanagment.presentation.manageTaskimport android.content.res.ColorStateListimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.core.view.childrenimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport com.google.android.material.chip.Chipimport dagger.hilt.android.AndroidEntryPointimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.taskmanagment.Rimport ir.gonabad.taskmanagment.databinding.FragmentManageTaskBindingimport ir.gonabad.taskmanagment.presentation.home.CategoryAdapterimport ir.gonabad.taskmanagment.utils.BaseFragmentimport ir.gonabad.taskmanagment.utils.Constantsimport ir.gonabad.taskmanagment.utils.convertToEnglishNumberimport ir.gonabad.taskmanagment.utils.getValueFromThemeimport org.json.JSONArray@AndroidEntryPointclass ManageTaskFragment : BaseFragment() {    private val TAG = "ManageTaskFragment"    lateinit var binding : FragmentManageTaskBinding    val viewModel : ManageTaskViewModel by viewModels()    private var userListSelected = arrayListOf<Int>()    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = FragmentManageTaskBinding.inflate(inflater , container , false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initViewModel()        initView()        viewModel.getUserList()    }    private fun initView(){        var categoryId : String = ""        arguments?.let {            categoryId = it.getString("category_id").toString()        }        binding.tbAddTask.setNavigationOnClickListener {            findNavController().popBackStack()        }        binding.btnManageTaskApply.setOnClickListener {            val title = binding.etManageTaskTitle.text            val des = binding.etManageTaskDescription.text            val daysEnd = binding.etManageTaskDays.text            val users = getUserAssigns()            val status = when{                binding.rbManageTaskTodo.isChecked -> Constants.TASK_STATUS_TODO                binding.rbManageTaskDoing.isChecked -> Constants.TASK_STATUS_DOING                binding.rbManageTaskDone.isChecked -> Constants.TASK_STATUS_DONE                else -> Constants.TASK_STATUS_TODO            }            when{                title.isNullOrEmpty() -> binding.etlManageTaskTitle.error = getString(R.string.field_not_empty)                des.isNullOrEmpty() -> binding.etlManageTaskDescription.error = getString(R.string.field_not_empty)                daysEnd.isNullOrEmpty() -> binding.etlManageTaskDays.error = getString(R.string.field_not_empty)                users.isNullOrEmpty() -> showToast(getString(R.string.select_your_users))                else -> {                    viewModel.addTask(                        categoryId ,                        title.toString(),                        des.toString(),                        convertToEnglishNumber(daysEnd.toString()) ,                        status ,                        users.toString()                    )                }            }        }    }        private fun getUserAssigns() : String? {        val jsons = JSONArray()        binding.cgManageTaskUsers.children.forEach {            val i = it as Chip            if (i.chipIcon != null)            jsons.put("${i.text}")        }        return if (jsons.toString().length > 2)            jsons.toString()        else            null    }    private fun createChip(id : Int , text : String) : View{        val chip = Chip(requireContext())        chip.text = text        chip.id = id        chip.chipStrokeColor = ColorStateList.valueOf(getValueFromTheme(requireContext() , android.R.attr.colorPrimary))        chip.setOnClickListener {            Log.i("TAG", "createChip: aaaa-> ${chip.isChecked}")            if (chip.chipIcon == null){                chip.chipIcon = requireContext().getDrawable(R.drawable.ic_check)                chip.chipIconSize = 40f                chip.chipStrokeWidth = 3f            } else {                chip.chipIcon = null                chip.chipStrokeWidth = 0f            }        }        return chip    }    private fun initViewModel() {        viewModel.userListLiveData.observe(viewLifecycleOwner){            when(it){                is DataState.Loading -> {                    Log.i(TAG, "initViewModel: Loading")                    showLoadingGetUserList(true)                }                is DataState.Success -> {                    Log.i(TAG, "initViewModel: Success ${it.value}")                    it.value.result.forEachIndexed { index, strings ->                        binding.cgManageTaskUsers.addView(createChip(index , strings.first()))                    }                    showLoadingGetUserList(false)                }                is DataState.LocalError -> {                    Log.i(TAG, "initViewModel: LocalError ${it.message}")                    showLoadingGetUserList(false)                    showToast(getString(R.string.error_server))                }                is DataState.NetworkError -> {                    Log.i(TAG, "initViewModel: NetworkError ${it.networkError}")                    showLoadingGetUserList(false)                    showMessageErrorFromServer(it)                }            }        }        viewModel.addTaskLiveData.observe(viewLifecycleOwner){            when(it){                is DataState.Loading -> {                    Log.i(TAG, "initViewModel: Loading")                    showLoadingAddUser(true)                }                is DataState.Success -> {                    Log.i(TAG, "initViewModel: Success ${it.value}")                    showToast(getString(R.string.add_task_success))                    findNavController().popBackStack()                    showLoadingAddUser(false)                }                is DataState.LocalError -> {                    Log.i(TAG, "initViewModel: LocalError ${it.message}")                    showLoadingAddUser(false)                    showToast(getString(R.string.error_server))                }                is DataState.NetworkError -> {                    Log.i(TAG, "initViewModel: NetworkError ${it.networkError}")                    showLoadingAddUser(false)                    showMessageErrorFromServer(it)                }            }        }    }    private fun showLoadingGetUserList(show : Boolean) {        binding.nsvManageTask.visibility = if (show) View.GONE else View.VISIBLE        binding.pbManageTask.visibility = if (show) View.VISIBLE else View.GONE    }    private fun showLoadingAddUser(show : Boolean) {        binding.btnManageTaskApply.visibility = if (show) View.GONE else View.VISIBLE        binding.pbManageTaskAdd.visibility = if (show) View.VISIBLE else View.GONE    }}