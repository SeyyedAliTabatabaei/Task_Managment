package ir.gonabad.taskmanagment.presentation.taskListimport android.content.Contextimport android.content.res.ColorStateListimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.appcompat.widget.PopupMenuimport androidx.recyclerview.widget.RecyclerViewimport ir.gonabad.core.domain.ItemTaskimport ir.gonabad.core.domain.listTask.TaskListResponseimport ir.gonabad.taskmanagment.Rimport ir.gonabad.taskmanagment.databinding.ItemTaskBindingimport ir.gonabad.taskmanagment.utils.Constantsimport ir.gonabad.taskmanagment.utils.UserInfoContainerimport saman.zamani.persiandate.PersianDateclass TaskAdapter(private val context: Context ,private val taskListResponse: TaskListResponse,private val taskAdapterListener: TaskAdapterListener) : RecyclerView.Adapter<TaskAdapter.TaskAdapterViewHolder>() {    private var filteredList: List<ItemTask> = taskListResponse.result.toList()    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TaskAdapterViewHolder {        return TaskAdapterViewHolder(ItemTaskBinding.inflate(LayoutInflater.from(parent.context) , parent , false))    }    override fun getItemCount(): Int {        return filteredList.size    }    override fun onBindViewHolder(holder: TaskAdapterViewHolder, position: Int) {        holder.onBind(filteredList[position])    }    inner class TaskAdapterViewHolder(private val itemTask: ItemTaskBinding) : RecyclerView.ViewHolder(itemTask.root){        fun onBind(item: ItemTask) {            itemTask.tvItemCategoryTitle.text = item.title            itemTask.tvItemCategoryTitle.compoundDrawableTintList = ColorStateList.valueOf(                when(item.status){                    Constants.TASK_STATUS_TODO -> {                        context.getColor(R.color.red)                    }                    Constants.TASK_STATUS_DOING -> {                        context.getColor(R.color.yellow)                    }                    Constants.TASK_STATUS_DONE -> {                        context.getColor(R.color.green)                    }                    else  -> {                        context.getColor(R.color.red)                    }                }            )            itemTask.tvItemCategoryStatus.text = context.getString(R.string.status) + " : " + when(item.status){                Constants.TASK_STATUS_TODO -> context.getString(R.string.todo)                Constants.TASK_STATUS_DOING -> context.getString(R.string.doing)                Constants.TASK_STATUS_DONE -> context.getString(R.string.don)                else  -> context.getString(R.string.todo)            }            itemTask.tvItemCategoryDescription.text = context.getString(R.string.description) + " : " +  item.descreption            val cd = PersianDate(item.create_date.toLong() * 1000)            itemTask.tvItemCategoryCreateDate.text = context.getString(R.string.create_date) + " : " + "${cd.shYear}/${cd.monthName}/${cd.shDay}"            val ed = PersianDate(item.ending_date.toLong())            itemTask.tvItemCategoryEndDate.text = context.getString(R.string.ending_date) + " : " + "${ed.shYear}/${ed.monthName}/${ed.shDay}"            itemTask.ivItemTaskMenu.setOnClickListener {                val popup = PopupMenu(itemTask.root.context , itemTask.ivItemTaskMenu)                popup.menuInflater.inflate(R.menu.task_menu , popup.menu)                if (UserInfoContainer.typeAccount == Constants.TYPE_USER)                    popup.menu.getItem(1).isVisible = false                popup.setOnMenuItemClickListener {                    when(it.itemId){                        R.id.item_taskMenu_edit -> {                            taskAdapterListener.editTask(item)                        }                        R.id.item_taskMenu_delete -> {                            taskAdapterListener.deleteTask(item)                        }                    }                    return@setOnMenuItemClickListener false                }                popup.show()            }        }    }    fun filterByStatus(status: String?) {        filteredList = if (status == null)            taskListResponse.result        else            taskListResponse.result.filter { it.status == status }        taskAdapterListener.emptyList(filteredList.isEmpty())        notifyDataSetChanged()    }    interface TaskAdapterListener{        fun editTask(itemTask: ItemTask)        fun deleteTask(itemTask: ItemTask)        fun emptyList(isEmpty : Boolean)    }}