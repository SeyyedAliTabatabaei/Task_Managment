package ir.gonabad.taskmanagment.presentation.userListimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.core.domain.deleteUser.DeleteUserResponseimport ir.gonabad.core.domain.listUser.UserListResponseimport ir.gonabad.core.intractors.DeleteUserimport ir.gonabad.core.intractors.GetUserListimport ir.gonabad.taskmanagment.utils.BaseViewModelimport ir.gonabad.taskmanagment.utils.IsOnlineimport ir.gonabad.taskmanagment.utils.UserInfoContainerimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass UserListViewModel @Inject constructor(    private val getUserList: GetUserList ,    private val deleteUser: DeleteUser,    private val isOnline: IsOnline) : BaseViewModel() {    val usersLiveData = MutableLiveData<DataState<UserListResponse>>()    val deleteUsersLiveData = MutableLiveData<DataState<DeleteUserResponse>>()    fun getUserList() {        viewModelScope.launch(Dispatchers.IO) {            usersLiveData.postValue(DataState.Loading)            getUserList(UserInfoContainer.token.toString() , isOnline.isOnline()).catch {                usersLiveData.postValue(DataState.LocalError(it.message))            }.collect {                usersLiveData.postValue(it)            }        }    }    fun deleteUser(username : String) {        viewModelScope.launch(Dispatchers.IO) {            deleteUsersLiveData.postValue(DataState.Loading)            deleteUser(username ,UserInfoContainer.token.toString() , isOnline.isOnline()).catch {                deleteUsersLiveData.postValue(DataState.LocalError(it.message))            }.collect {                deleteUsersLiveData            }        }    }}