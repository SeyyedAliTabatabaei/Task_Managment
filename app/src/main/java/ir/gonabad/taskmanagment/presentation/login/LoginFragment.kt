package ir.gonabad.taskmanagment.presentation.loginimport android.os.Bundleimport android.util.Logimport android.view.LayoutInflaterimport android.view.Viewimport android.view.ViewGroupimport androidx.fragment.app.viewModelsimport androidx.navigation.fragment.findNavControllerimport dagger.hilt.android.AndroidEntryPointimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.taskmanagment.Rimport ir.gonabad.taskmanagment.databinding.FragmentLoginBindingimport ir.gonabad.taskmanagment.utils.BaseFragment@AndroidEntryPointclass LoginFragment : BaseFragment() {    private val TAG = "LoginFragment"    lateinit var binding : FragmentLoginBinding    val viewModel : LoginViewModel by viewModels()    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ): View? {        binding = FragmentLoginBinding.inflate(inflater , container , false)        return binding.root    }    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {        super.onViewCreated(view, savedInstanceState)        initViewModel()        initView()    }    private fun initView() {        binding.btnLoginConfirm.setOnClickListener {            val username = binding.etLoginUsername.text.toString()            val password = binding.etLoginPassword.text.toString()            when{                username.isNullOrEmpty() -> {                    binding.etlLoginUsername.error = getString(R.string.field_not_empty)                }                password.isNullOrEmpty() -> {                    binding.etlLoginPassword.error = getString(R.string.field_not_empty)                }                else -> {                    viewModel.login(username, password)                }            }        }    }    private fun initViewModel() {        viewModel.loginLiveData.observe(viewLifecycleOwner){            when(it){                is DataState.Loading -> {                    Log.i(TAG, "initViewModel: Loading")                    showLoading(true)                }                is DataState.Success -> {                    Log.i(TAG, "initViewModel: Success ${it.value}")                    showLoading(false)                    findNavController().setGraph(R.navigation.nav_home)                }                is DataState.LocalError -> {                    Log.i(TAG, "initViewModel: LocalError ${it.message}")                    showLoading(false)                    showToast(getString(R.string.error_server))                }                is DataState.NetworkError -> {                    Log.i(TAG, "initViewModel: NetworkError ${it.networkError}")                    showLoading(false)                    showMessageErrorFromServer(it)                }            }        }    }    private fun showLoading(show : Boolean) {        binding.btnLoginConfirm.visibility = if (show) View.INVISIBLE else View.VISIBLE        binding.pbLogin.visibility = if (show) View.VISIBLE else View.GONE    }}