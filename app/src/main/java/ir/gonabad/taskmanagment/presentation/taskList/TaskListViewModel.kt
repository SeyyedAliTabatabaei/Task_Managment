package ir.gonabad.taskmanagment.presentation.taskListimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.viewModelScopeimport dagger.hilt.android.lifecycle.HiltViewModelimport ir.ghadamyaar.aminsoft.stepcounter.helper.DataStateimport ir.gonabad.core.domain.deleteTask.DeleteTaskResponseimport ir.gonabad.core.domain.listTask.TaskListResponseimport ir.gonabad.core.domain.listUser.UserListResponseimport ir.gonabad.core.intractors.DeleteTaskimport ir.gonabad.core.intractors.GetTaskListimport ir.gonabad.taskmanagment.utils.BaseViewModelimport ir.gonabad.taskmanagment.utils.IsOnlineimport ir.gonabad.taskmanagment.utils.UserInfoContainerimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.flow.catchimport kotlinx.coroutines.launchimport javax.inject.Inject@HiltViewModelclass TaskListViewModel @Inject constructor(    private val isOnline: IsOnline ,    private val getTaskList: GetTaskList ,    private val deleteTask: DeleteTask) : BaseViewModel() {    val taskListLiveData = MutableLiveData<DataState<TaskListResponse>>()    val deleteTaskLiveData = MutableLiveData<DataState<DeleteTaskResponse>>()    fun getTaskList(categoryId : String) {        viewModelScope.launch(Dispatchers.IO) {            taskListLiveData.postValue(DataState.Loading)            getTaskList(categoryId ,UserInfoContainer.token.toString() , isOnline.isOnline()).catch {                taskListLiveData.postValue(DataState.LocalError(it.message))            }.collect {                taskListLiveData.postValue(it)            }        }    }    fun deleteTask(taskId : String) {        viewModelScope.launch(Dispatchers.IO) {            deleteTaskLiveData.postValue(DataState.Loading)            deleteTask(taskId ,UserInfoContainer.token.toString() , isOnline.isOnline()).catch {                deleteTaskLiveData.postValue(DataState.LocalError(it.message))            }.collect {                deleteTaskLiveData.postValue(it)            }        }    }}