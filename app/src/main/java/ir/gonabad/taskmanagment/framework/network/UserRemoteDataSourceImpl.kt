package ir.gonabad.taskmanagment.framework.networkimport ir.gonabad.core.data.UserRemoteDataSourceimport ir.gonabad.core.domain.addCategory.AddCategoryResponseimport ir.gonabad.core.domain.addTask.AddTaskResponseimport ir.gonabad.core.domain.deleteCategory.DeleteCategoryResponseimport ir.gonabad.core.domain.deleteTask.DeleteTaskResponseimport ir.gonabad.core.domain.deleteUser.DeleteUserResponseimport ir.gonabad.core.domain.editTask.EditTaskResponseimport ir.gonabad.core.domain.listCategory.CategoryListimport ir.gonabad.core.domain.listTask.TaskListResponseimport ir.gonabad.core.domain.listUser.UserListResponseimport ir.gonabad.core.domain.login.Loginimport ir.gonabad.taskmanagment.framework.network.mapper.AddCategoryMapperimport ir.gonabad.taskmanagment.framework.network.mapper.AddTaskMapperimport ir.gonabad.taskmanagment.framework.network.mapper.CategoryListMapperimport ir.gonabad.taskmanagment.framework.network.mapper.DeleteCategoryMapperimport ir.gonabad.taskmanagment.framework.network.mapper.DeleteTaskMapperimport ir.gonabad.taskmanagment.framework.network.mapper.DeleteUserMapperimport ir.gonabad.taskmanagment.framework.network.mapper.EditTaskMapperimport ir.gonabad.taskmanagment.framework.network.mapper.LoginMapperimport ir.gonabad.taskmanagment.framework.network.mapper.TaskListMapperimport ir.gonabad.taskmanagment.framework.network.mapper.UserListMapperimport javax.inject.Injectclass UserRemoteDataSourceImpl @Inject constructor(    private val apiService: ApiService,    private val loginMapper: LoginMapper ,    private val categoryListMapper: CategoryListMapper ,    private val addCategoryMapper: AddCategoryMapper ,    private val deleteCategoryMapper: DeleteCategoryMapper ,    private val userListMapper: UserListMapper ,    private val deleteUserMapper: DeleteUserMapper ,    private val addTaskMapper: AddTaskMapper ,    private val taskListMapper: TaskListMapper ,    private val deleteTaskMapper: DeleteTaskMapper ,    private val editTaskMapper: EditTaskMapper) : UserRemoteDataSource {    override suspend fun login(username: String, password: String): Login {        return loginMapper.mapFromEntity(apiService.login(username, password))    }    override suspend fun register(username: String, password: String, type: String, token: String) : Login {        return loginMapper.mapFromEntity(apiService.register(username, password , type, token))    }    override suspend fun getCategory(token: String): CategoryList {        return categoryListMapper.mapFromEntity(apiService.getCategory(token))    }    override suspend fun addCategory(title: String, token: String): AddCategoryResponse {        return addCategoryMapper.mapFromEntity(apiService.addCategory(title , token))    }    override suspend fun editCategory(        id: String,        title: String,        token: String    ): AddCategoryResponse {        return addCategoryMapper.mapFromEntity(apiService.editCategory(id, title, token))    }    override suspend fun deleteCategory(id: String, token: String): DeleteCategoryResponse {        return deleteCategoryMapper.mapFromEntity(apiService.deleteCategory(id, token))    }    override suspend fun getUserList(token: String): UserListResponse {        return userListMapper.mapFromEntity(apiService.getUsers(token))    }    override suspend fun deleteUser(username: String, token: String): DeleteUserResponse {        return deleteUserMapper.mapFromEntity(apiService.deleteUser(username, token))    }    override suspend fun addTask(        categoryId: String,        title: String,        descreption: String,        status: String,        days: String,        users: String,        token: String    ): AddTaskResponse {        return addTaskMapper.mapFromEntity(apiService.addTask(categoryId , title , descreption , status , days, users , token))    }    override suspend fun getTaskList(categoryId: String, token: String): TaskListResponse {        return taskListMapper.mapFromEntity(apiService.getListTask(categoryId, token))    }    override suspend fun deleteTask(taskId: String, token: String): DeleteTaskResponse {        return deleteTaskMapper.mapFromEntity(apiService.deleteTask(taskId, token))    }    override suspend fun editTask(        taskId: String,        title: String,        descreption: String,        status: String,        endTime: String,        users: String,        token: String    ): EditTaskResponse {        return editTaskMapper.mapFromEntity(apiService.editTask(taskId , title , descreption , status , endTime  , token))    }    override suspend fun changeStatusTask(        taskId: String,        descreption: String,        status: String,        token: String    ): EditTaskResponse {        return editTaskMapper.mapFromEntity(apiService.changeStatus(taskId , descreption , status , token))    }}